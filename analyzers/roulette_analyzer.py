"""
Analisador de Padr√µes de Roleta - FASE 2 (AVAN√áADO)
An√°lise estat√≠stica complexa e detec√ß√£o de bias em Python
"""

import numpy as np
from scipy import stats
from collections import defaultdict
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional


class RouletteAdvancedAnalyzer:
    """An√°lise avan√ßada de padr√µes de roleta (Fase 2)"""

    # Defini√ß√µes de setores da roda europeia
    SECTORS = {
        "voisins": [22, 18, 29, 7, 28, 12, 35, 3, 26, 0, 32, 15, 19, 4, 21, 2, 25],
        "tiers": [27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33],
        "orphelins": [17, 34, 6, 1, 20, 14, 31, 9],
    }

    SECTOR_NAMES = {
        "voisins": "Vizinhos do Zero",
        "tiers": "Ter√ßo do Cilindro",
        "orphelins": "√ìrf√£os",
    }

    WHEEL_ORDER = [
        0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5,
        24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26,
    ]

    def __init__(self):
        self.cache = {}
        self.cache_ttl = 30  # Cache por 30 segundos

    # ==================== AN√ÅLISE DE SETORES ====================

    def analyze_sectors(self, results: List[Dict]) -> Optional[Dict]:
        """
        Detecta setor quente da roda com an√°lise estat√≠stica avan√ßada
        
        Args:
            results: Lista de resultados com {'number', 'color', 'timestamp'}
            
        Returns:
            Dict com informa√ß√µes do setor quente ou None
        """
        if len(results) < 20:
            return None

        last_50 = results[:50] if len(results) >= 50 else results

        # Contar apari√ß√µes por setor
        sector_counts = {sector: 0 for sector in self.SECTORS.keys()}

        for result in last_50:
            num = result.get("number")
            for sector, numbers in self.SECTORS.items():
                if num in numbers:
                    sector_counts[sector] += 1

        # Encontrar setor dominante
        hot_sector = max(sector_counts, key=sector_counts.get)
        count = sector_counts[hot_sector]
        total = len(last_50)
        percentage = (count / total) * 100

        # Teste chi-square para signific√¢ncia estat√≠stica
        expected = total / 3  # Distribui√ß√£o esperada (3 setores)
        observed = list(sector_counts.values())
        chi2, p_value = stats.chisquare(observed, [expected] * 3)

        # S√≥ retorna se o setor estiver significativamente quente
        if percentage >= 45 and p_value < 0.05:
            confidence = min(55 + (percentage - 45) * 1.2, 80)

            return {
                "id": "hot-sector-advanced",
                "type": "advanced",
                "confidence": round(confidence, 1),
                "priority": percentage,
                "icon": "üéØ",
                "title": f"Setor Quente: {self.SECTOR_NAMES[hot_sector]}",
                "description": f'O setor "{self.SECTOR_NAMES[hot_sector]}" apareceu em {count} de {total} resultados ({percentage:.1f}%). Teste chi-square indica desvio significativo (p={p_value:.4f}).',
                "suggestion": f"Apostar nos n√∫meros: {', '.join(map(str, self.SECTORS[hot_sector]))}",
                "data": {
                    "Setor": self.SECTOR_NAMES[hot_sector],
                    "Apari√ß√µes": f"{count}/{total}",
                    "Porcentagem": f"{percentage:.1f}%",
                    "P-value": f"{p_value:.4f}",
                },
                "statistical": {
                    "chi_square": round(chi2, 2),
                    "p_value": round(p_value, 4),
                    "significant": bool(p_value < 0.05),
                },
            }

        return None

    # ==================== DETEC√á√ÉO DE BIAS ====================

    def detect_bias(self, results: List[Dict]) -> Optional[Dict]:
        """
        Detecta bias de roda usando teste chi-square
        
        Args:
            results: Lista de pelo menos 100 resultados
            
        Returns:
            Dict com informa√ß√µes de bias ou None
        """
        if len(results) < 100:
            return None

        # Contar frequ√™ncia de cada n√∫mero
        frequency = defaultdict(int)
        for result in results:
            frequency[result["number"]] += 1

        # Calcular frequ√™ncias observadas e esperadas
        total = len(results)
        expected_freq = total / 37  # Distribui√ß√£o uniforme
        observed = [frequency.get(i, 0) for i in range(37)]
        expected = [expected_freq] * 37

        # Teste chi-square
        chi2, p_value = stats.chisquare(observed, expected)

        # Detectar bias significativo
        if p_value < 0.01:  # N√≠vel de signific√¢ncia 1%
            # Encontrar n√∫meros com desvio significativo
            biased_numbers = []
            for num in range(37):
                obs_freq = frequency.get(num, 0)
                deviation = ((obs_freq - expected_freq) / expected_freq) * 100

                if abs(deviation) > 50:  # Desvio > 50%
                    biased_numbers.append(
                        {"number": num, "count": obs_freq, "deviation": deviation}
                    )

            if biased_numbers:
                biased_numbers.sort(key=lambda x: abs(x["deviation"]), reverse=True)
                top_biased = biased_numbers[0]

                confidence = min(70 + abs(top_biased["deviation"]) * 0.2, 90)

                return {
                    "id": "wheel-bias",
                    "type": "advanced",
                    "confidence": round(confidence, 1),
                    "priority": 100,  # Prioridade m√°xima
                    "icon": "‚ö†Ô∏è",
                    "title": "BIAS DE RODA DETECTADO!",
                    "description": f"An√°lise estat√≠stica indica poss√≠vel bias na roda! O n√∫mero {top_biased['number']} apareceu {top_biased['count']} vezes em {total} rodadas (desvio: {top_biased['deviation']:.1f}%). Chi-square test: œá¬≤={chi2:.2f}, p={p_value:.6f}",
                    "suggestion": f"Apostar nos n√∫meros com bias: {', '.join([str(n['number']) for n in biased_numbers[:5]])}",
                    "data": {
                        "Chi-square": f"{chi2:.2f}",
                        "P-value": f"{p_value:.6f}",
                        "Top biased": f"{top_biased['number']} ({top_biased['deviation']:.1f}%)",
                        "Total analisado": f"{total} rodadas",
                    },
                    "statistical": {
                        "chi_square": round(chi2, 2),
                        "p_value": round(p_value, 6),
                        "biased_numbers": biased_numbers[:5],
                        "significant": True,
                    },
                }

        return None

    # ==================== AN√ÅLISE DE CLUSTERS ====================

    def analyze_spatial_clusters(self, results: List[Dict]) -> Optional[Dict]:
        """
        Detecta clusters espaciais de n√∫meros na roda f√≠sica
        
        Args:
            results: Lista de resultados recentes
            
        Returns:
            Dict com informa√ß√µes de cluster ou None
        """
        if len(results) < 20:
            return None

        last_20 = results[:20]

        # Mapear n√∫meros para posi√ß√µes na roda
        positions = []
        for result in last_20:
            try:
                pos = self.WHEEL_ORDER.index(result["number"])
                positions.append(pos)
            except ValueError:
                continue

        if len(positions) < 15:
            return None

        # Calcular dist√¢ncias m√©dias entre resultados consecutivos
        distances = []
        for i in range(len(positions) - 1):
            dist = min(
                abs(positions[i] - positions[i + 1]),
                37 - abs(positions[i] - positions[i + 1]),
            )
            distances.append(dist)

        avg_distance = np.mean(distances)
        expected_distance = 37 / 2  # ~18.5 para distribui√ß√£o uniforme

        # Se a dist√¢ncia m√©dia √© muito menor que esperado, h√° cluster
        if avg_distance < expected_distance * 0.6:  # 60% da dist√¢ncia esperada
            confidence = min(60 + (expected_distance - avg_distance) * 2, 78)

            # Encontrar a regi√£o mais quente
            position_freq = defaultdict(int)
            for pos in positions:
                # Contar em janelas de 7 posi√ß√µes
                for window_pos in range(max(0, pos - 3), min(37, pos + 4)):
                    position_freq[window_pos] += 1

            hot_position = max(position_freq, key=position_freq.get)
            hot_numbers = self.WHEEL_ORDER[
                max(0, hot_position - 3) : min(37, hot_position + 4)
            ]

            return {
                "id": "spatial-cluster",
                "type": "advanced",
                "confidence": round(confidence, 1),
                "priority": 85,
                "icon": "üé™",
                "title": "Cluster Espacial Detectado",
                "description": f"Os resultados est√£o concentrados em uma regi√£o espec√≠fica da roda. Dist√¢ncia m√©dia entre n√∫meros: {avg_distance:.1f} posi√ß√µes (esperado: {expected_distance:.1f}). Isso pode indicar vi√©s f√≠sico ou padr√£o de lan√ßamento.",
                "suggestion": f"Apostar em n√∫meros ao redor da posi√ß√£o {hot_position}: {', '.join(map(str, hot_numbers))}",
                "data": {
                    "Dist. m√©dia": f"{avg_distance:.1f} posi√ß√µes",
                    "Dist. esperada": f"{expected_distance:.1f}",
                    "Regi√£o quente": f"Posi√ß√£o {hot_position}",
                    "N√∫meros": ", ".join(map(str, hot_numbers[:7])),
                },
                "statistical": {
                    "average_distance": round(avg_distance, 2),
                    "expected_distance": round(expected_distance, 2),
                    "cluster_strength": round(
                        (1 - avg_distance / expected_distance) * 100, 1
                    ),
                },
            }

        return None

    # ==================== AN√ÅLISE DE TEND√äNCIAS TEMPORAIS ====================

    def analyze_temporal_trends(self, results: List[Dict]) -> Optional[Dict]:
        """
        Analisa tend√™ncias ao longo do tempo
        
        Args:
            results: Lista de resultados com timestamps
            
        Returns:
            Dict com tend√™ncias detectadas ou None
        """
        if len(results) < 50:
            return None

        # Dividir em blocos de 10 resultados
        blocks = [results[i : i + 10] for i in range(0, min(50, len(results)), 10)]

        if len(blocks) < 3:
            return None

        # Analisar tend√™ncia de vermelho/preto em cada bloco
        red_percentages = []
        for block in blocks:
            red_count = sum(1 for r in block if r.get("color") == "red")
            red_percentages.append((red_count / len(block)) * 100)

        # Verificar se h√° tend√™ncia crescente ou decrescente
        if len(red_percentages) >= 3:
            # Regress√£o linear simples
            x = np.arange(len(red_percentages))
            slope, intercept = np.polyfit(x, red_percentages, 1)

            # Tend√™ncia significativa se slope > 5% por bloco
            if abs(slope) > 5:
                trend = "crescente" if slope > 0 else "decrescente"
                current_perc = red_percentages[-1]
                confidence = min(50 + abs(slope) * 3, 68)

                color = "Vermelho" if slope > 0 else "Preto"

                return {
                    "id": "temporal-trend",
                    "type": "advanced",
                    "confidence": round(confidence, 1),
                    "priority": abs(slope) * 3,
                    "icon": "üìà" if slope > 0 else "üìâ",
                    "title": f"Tend√™ncia Temporal: {color}",
                    "description": f"An√°lise de blocos de 10 rodadas mostra tend√™ncia {trend} para {color}. Taxa de mudan√ßa: {slope:.1f}% por bloco. Percentual atual: {current_perc:.1f}%.",
                    "suggestion": f"Tend√™ncia favorece {color} no curto prazo",
                    "data": {
                        "Tend√™ncia": trend.capitalize(),
                        "Taxa": f"{slope:.1f}%/bloco",
                        "Cor favorecida": color,
                        "Atual": f"{current_perc:.1f}%",
                    },
                    "statistical": {
                        "slope": round(slope, 2),
                        "intercept": round(intercept, 2),
                        "blocks_analyzed": len(blocks),
                    },
                }

        return None

    # ==================== AN√ÅLISE CONSOLIDADA ====================

    def analyze_all_advanced_patterns(self, results: List[Dict]) -> List[Dict]:
        """
        Executa todas as an√°lises avan√ßadas
        
        Args:
            results: Lista completa de resultados
            
        Returns:
            Lista de padr√µes avan√ßados detectados
        """
        patterns = []

        # 1. An√°lise de setores
        sector_pattern = self.analyze_sectors(results)
        if sector_pattern:
            patterns.append(sector_pattern)

        # 2. Detec√ß√£o de bias (apenas com dados suficientes)
        if len(results) >= 100:
            bias_pattern = self.detect_bias(results)
            if bias_pattern:
                patterns.append(bias_pattern)

        # 3. An√°lise de clusters espaciais
        cluster_pattern = self.analyze_spatial_clusters(results)
        if cluster_pattern:
            patterns.append(cluster_pattern)

        # 4. An√°lise de tend√™ncias temporais
        temporal_pattern = self.analyze_temporal_trends(results)
        if temporal_pattern:
            patterns.append(temporal_pattern)

        # Ordenar por prioridade
        patterns.sort(key=lambda x: x.get("priority", 0), reverse=True)

        return patterns

    # ==================== ESTAT√çSTICAS GERAIS ====================

    def get_comprehensive_stats(self, results: List[Dict]) -> Dict:
        """
        Retorna estat√≠sticas completas sobre os resultados
        
        Args:
            results: Lista de resultados
            
        Returns:
            Dict com estat√≠sticas detalhadas
        """
        if not results:
            return {}

        total = len(results)

        # Frequ√™ncias
        frequency = defaultdict(int)
        color_freq = defaultdict(int)
        for result in results:
            frequency[result["number"]] += 1
            color_freq[result.get("color", "unknown")] += 1

        # N√∫meros mais/menos frequentes
        sorted_freq = sorted(frequency.items(), key=lambda x: x[1], reverse=True)
        hot_nums = sorted_freq[:5]
        cold_nums = sorted_freq[-5:]

        # Estat√≠sticas por setor
        sector_stats = {}
        for sector, numbers in self.SECTORS.items():
            count = sum(frequency.get(num, 0) for num in numbers)
            sector_stats[sector] = {
                "count": count,
                "percentage": round((count / total) * 100, 1),
            }

        return {
            "total_spins": total,
            "colors": {
                "red": color_freq.get("red", 0),
                "black": color_freq.get("black", 0),
                "green": color_freq.get("green", 0),
            },
            "hot_numbers": [{"number": n, "count": c} for n, c in hot_nums],
            "cold_numbers": [{"number": n, "count": c} for n, c in cold_nums],
            "sectors": sector_stats,
            "timestamp": datetime.now().isoformat(),
        }
