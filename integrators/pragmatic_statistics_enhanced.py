"""
Melhorias no cliente de estat√≠sticas da Pragmatic Play para aumentar a resili√™ncia no Railway.
Esta vers√£o inclui:
1. Rota√ß√£o de User-Agents
2. Retry com exponential backoff
3. Configura√ß√£o de proxies autom√°tica
4. Fallback para dados simulados
"""

import logging
import requests
import json
import time
import random
from datetime import datetime
from typing import List, Dict, Optional, Union, Tuple
import re
import os

logger = logging.getLogger(__name__)

class PragmaticStatisticsClientEnhanced:
    """
    Cliente aprimorado para acessar as estat√≠sticas de jogos da API da Pragmatic Play.
    Obt√©m resultados hist√≥ricos dos jogos com maior resili√™ncia para ambientes de produ√ß√£o.
    """
    
    def __init__(self, table_id: str = "rwbrzportrwa16rg", jsessionid: Optional[str] = None, base_url: Optional[str] = None):
        """
        Inicializa o cliente de estat√≠sticas da Pragmatic Play com recursos aprimorados.
        
        Args:
            table_id: ID da mesa de roleta (padr√£o para Roleta Brasileira)
            jsessionid: Cookie de sess√£o JSESSIONID
            base_url: URL base da API (opcional, usa o padr√£o se n√£o fornecido)
        """
        self.table_id = table_id
        self.jsessionid = jsessionid
        self.base_url = base_url or "https://games.pragmaticplaylive.net"
        self.history_endpoint = f"/api/ui/statisticHistory"
        
        # Se n√£o foi fornecido JSESSIONID, tentar obter do sistema existente
        if not self.jsessionid:
            self._try_get_jsessionid_from_system()
        
        # Lista de User-Agents para rota√ß√£o
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0_0) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0"
        ]
        
        # Carregar proxies do ambiente, se dispon√≠veis
        self.http_proxies = os.environ.get('HTTP_PROXIES', '').split(',')
        self.socks_proxies = os.environ.get('SOCKS_PROXIES', '').split(',')
        self.http_proxies = [p for p in self.http_proxies if p.strip()]
        self.socks_proxies = [p for p in self.socks_proxies if p.strip()]
        
        # Configura√ß√µes de retry
        self.max_retries = 5
        self.retry_delay = 1  # Segundos iniciais, aumentar√° exponencialmente
        
        logger.info(f"üìä PragmaticStatisticsClientEnhanced inicializado para mesa {table_id}")
        logger.info(f"üîÑ Proxies HTTP dispon√≠veis: {len(self.http_proxies)}")
        logger.info(f"üîÑ Proxies SOCKS dispon√≠veis: {len(self.socks_proxies)}")
        
    def _try_get_jsessionid_from_system(self):
        """
        Tenta obter JSESSIONID do sistema existente (roulette_integrator)
        """
        try:
            # Tentar importar do app principal
            import sys
            import os
            
            # Adicionar diret√≥rio pai ao path se necess√°rio
            parent_dir = os.path.dirname(os.path.dirname(__file__))
            if parent_dir not in sys.path:
                sys.path.append(parent_dir)
            
            # Tentar obter do integrador principal
            try:
                from app import roulette_integrator
                if roulette_integrator and hasattr(roulette_integrator, 'jsessionid') and roulette_integrator.jsessionid:
                    self.jsessionid = roulette_integrator.jsessionid
                    logger.info("üîë JSESSIONID obtido do roulette_integrator existente")
                    return
            except ImportError:
                logger.info("üì¶ N√£o foi poss√≠vel importar roulette_integrator do app")
            
            # M√©todo alternativo: verificar se o ambiente Railway tem JSESSIONID
            railway_jsessionid = os.environ.get('RAILWAY_JSESSIONID') or os.environ.get('PRAGMATIC_JSESSIONID')
            if railway_jsessionid:
                self.jsessionid = railway_jsessionid
                logger.info("üöÇ JSESSIONID obtido das vari√°veis de ambiente Railway")
                return
            
            logger.info("üìù Nenhum JSESSIONID dispon√≠vel no sistema - usar√° fallback quando necess√°rio")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter JSESSIONID do sistema: {e}")
        
    def set_jsessionid(self, jsessionid: str):
        """
        Define o JSESSIONID para autentica√ß√£o.
        
        Args:
            jsessionid: Cookie de sess√£o JSESSIONID
        """
        self.jsessionid = jsessionid
        logger.info("üîë JSESSIONID definido para o cliente de estat√≠sticas")
    
    def _parse_game_result(self, result_str: str) -> Dict:
        """
        Processa uma string de resultado da roleta (ex: "26 Black") para extrair n√∫mero e cor.
        
        Args:
            result_str: String do resultado (ex: "26 Black", "0  Green")
            
        Returns:
            Dict com n√∫mero e cor
        """
        # Padr√£o para extrair n√∫mero e cor
        pattern = r'(\d+)\s+(Black|Red|Green)'
        match = re.search(pattern, result_str, re.IGNORECASE)
        
        if match:
            number = int(match.group(1))
            color = match.group(2).lower()
            
            # Verificar n√∫mero zero (green)
            if number == 0:
                color = 'green'
                
            return {
                'number': number,
                'color': color
            }
        else:
            # Fallback: tentar extrair apenas o n√∫mero
            number_match = re.search(r'(\d+)', result_str)
            if number_match:
                number = int(number_match.group(1))
                # Determinar cor baseado no n√∫mero
                if number == 0:
                    color = 'green'
                elif number in [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]:
                    color = 'red'
                else:
                    color = 'black'
                
                return {
                    'number': number,
                    'color': color
                }
        
        # Se n√£o conseguir extrair, retorna None
        return {
            'number': -1,
            'color': 'unknown',
            'raw': result_str
        }
        
    def _get_random_user_agent(self):
        """Retorna um User-Agent aleat√≥rio da lista."""
        return random.choice(self.user_agents)
        
    def _get_random_proxy(self):
        """Retorna um proxy aleat√≥rio, priorizando HTTP."""
        if self.http_proxies:
            return {'http': random.choice(self.http_proxies), 'https': random.choice(self.http_proxies)}
        elif self.socks_proxies:
            proxy = random.choice(self.socks_proxies)
            return {'http': proxy, 'https': proxy}
        return None
    
    def fetch_history(self, games_count: int = 100, use_proxy: bool = True) -> Tuple[int, Dict]:
        """
        Busca o hist√≥rico de jogos da API com retry e rota√ß√£o de User-Agent.
        
        Args:
            games_count: N√∫mero de jogos a obter (m√°x. 500)
            use_proxy: Se deve usar proxy para esta requisi√ß√£o
            
        Returns:
            Tuple[int, Dict]: Status HTTP e dados da resposta
        """
        # Limitar n√∫mero de jogos entre 10 e 500
        games_count = min(500, max(10, games_count))
        
        # Verificar se temos JSESSIONID
        if not self.jsessionid:
            logger.warning("‚ö†Ô∏è JSESSIONID n√£o dispon√≠vel - isso √© normal no Railway")
            return 401, {'error': 'JSESSIONID n√£o fornecido', 'railway_compatible': True}
        
        # Par√¢metros da requisi√ß√£o baseados na URL real que funciona
        params = {
            "tableId": self.table_id,
            "numberOfGames": games_count,
            "JSESSIONID": self.jsessionid,
            "ck": int(time.time() * 1000),  # Timestamp em milissegundos
            "game_mode": "lobby_desktop"
        }
        
        # Lista de User-Agents mais variados para Railway
        railway_user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0'
        ]
        
        # Headers mais robustos para Railway
        headers = {
            'Accept': 'application/json, text/plain, */*',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7,es;q=0.6',
            'Cache-Control': 'no-cache',
            'Origin': 'https://client.pragmaticplaylive.net',
            'Pragma': 'no-cache',
            'Referer': 'https://client.pragmaticplaylive.net/',
            'Sec-Ch-Ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-site',
            'User-Agent': random.choice(railway_user_agents),
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        # Detectar se estamos no Railway
        is_railway = os.environ.get('RAILWAY_ENVIRONMENT') is not None
        
        if is_railway:
            logger.info("üöÇ Detectado ambiente Railway - usando configura√ß√£o otimizada")
            # Headers espec√≠ficos para Railway
            headers.update({
                'DNT': '1',
                'Upgrade-Insecure-Requests': '1',
                'Connection': 'keep-alive'
            })
        
        # Implementa√ß√£o de retry com exponential backoff
        for attempt in range(max(3, self.max_retries)):  # Pelo menos 3 tentativas
            try:
                # Rotacionar User-Agent a cada tentativa
                headers['User-Agent'] = random.choice(railway_user_agents)
                
                # Log de tentativa
                logger.info(f"üåê Tentativa {attempt+1}: Solicitando hist√≥rico para {games_count} jogos")
                if is_railway:
                    logger.info(f"üöÇ Railway: Usando User-Agent {headers['User-Agent'][:50]}...")
                
                # URL da API
                url = f"{self.base_url}{self.history_endpoint}"
                
                # Configurar timeout mais conservador para Railway
                timeout = 30 if is_railway else 20
                
                # Fazer a requisi√ß√£o
                response = requests.get(
                    url, 
                    params=params, 
                    headers=headers,
                    timeout=timeout,
                    allow_redirects=True,
                    verify=True  # Manter verifica√ß√£o SSL
                )
                
                # Log do status da resposta
                logger.info(f"üìä Status da API: {response.status_code}")
                
                # Verificar se obteve sucesso
                if response.status_code == 200:
                    try:
                        data = response.json()
                        logger.info(f"‚úÖ Dados obtidos com sucesso ({len(str(data))} chars)")
                        return 200, data
                    except ValueError as e:
                        logger.error(f"‚ùå Resposta n√£o √© JSON v√°lido: {e}")
                        return 500, {'error': 'Resposta inv√°lida da API'}
                
                elif response.status_code == 401:
                    logger.warning("üîê JSESSIONID inv√°lido ou expirado")
                    return 401, {'error': 'JSESSIONID inv√°lido', 'needs_refresh': True}
                
                elif response.status_code == 403:
                    logger.warning("üö´ Acesso negado - poss√≠vel bloqueio de IP")
                    if is_railway:
                        logger.warning("üöÇ Railway detectado - isso √© esperado, usando fallback")
                    return 403, {'error': 'Acesso negado', 'railway_blocked': True}
                
                elif response.status_code == 503:
                    logger.warning("‚ö†Ô∏è Servi√ßo indispon√≠vel")
                    return 503, {'error': 'Servi√ßo indispon√≠vel'}
                
                else:
                    logger.error(f"‚ùå Erro HTTP {response.status_code}: {response.text[:200]}")
                    
                    # Se √© a √∫ltima tentativa, retornar erro
                    if attempt == max(3, self.max_retries) - 1:
                        return response.status_code, {'error': f'HTTP {response.status_code}'}
                    
                    # Aguardar antes de tentar novamente
                    wait_time = (2 ** attempt) + random.uniform(0.5, 2.0)  # Jitter
                    logger.info(f"‚è≥ Aguardando {wait_time:.1f}s antes da pr√≥xima tentativa...")
                    time.sleep(wait_time)
                    
            except requests.exceptions.Timeout:
                logger.error(f"‚è∞ Timeout na tentativa {attempt+1}")
                if attempt == max(3, self.max_retries) - 1:
                    return 408, {'error': 'Timeout na requisi√ß√£o'}
                    
            except requests.exceptions.ConnectionError as e:
                logger.error(f"üîå Erro de conex√£o na tentativa {attempt+1}: {e}")
                if attempt == max(3, self.max_retries) - 1:
                    return 503, {'error': 'Erro de conex√£o'}
                    
            except Exception as e:
                logger.error(f"üí• Erro inesperado na tentativa {attempt+1}: {e}")
                if attempt == max(3, self.max_retries) - 1:
                    return 500, {'error': str(e)}
            
            # Aguardar entre tentativas (com backoff exponencial)
            if attempt < max(3, self.max_retries) - 1:
                wait_time = (2 ** attempt) + random.uniform(0.5, 2.0)
                time.sleep(wait_time)
                
        # Se chegou aqui, todas as tentativas falharam
        logger.error("‚ùå Todas as tentativas falharam")
        return 500, {"error": "Todas as tentativas falharam"}
    
    def process_history(self, history_data: Dict) -> List[Dict]:
        """
        Processa os dados brutos do hist√≥rico em um formato padronizado.
        
        Args:
            history_data: Dados brutos do hist√≥rico da API
            
        Returns:
            List[Dict]: Lista de resultados processados
        """
        results = []
        
        # Debug: Imprimir estrutura dos dados recebidos
        logger.info(f"üîç DEBUG: Tipo dos dados recebidos: {type(history_data)}")
        logger.info(f"üîç DEBUG: Chaves dos dados: {list(history_data.keys()) if isinstance(history_data, dict) else 'N√£o √© dict'}")
        
        # Tentar diferentes estruturas de dados poss√≠veis
        games_data = None
        
        if isinstance(history_data, dict):
            # Tentar diferentes chaves poss√≠veis
            for key in ['history', 'results', 'data', 'games', 'gameHistory', 'statisticHistory']:
                if key in history_data:
                    games_data = history_data[key]
                    logger.info(f"üîç DEBUG: Encontrados dados na chave '{key}', tipo: {type(games_data)}")
                    break
            
            # Se n√£o encontrou em chaves espec√≠ficas, verificar se os dados est√£o no n√≠vel raiz
            if games_data is None:
                # Procurar por qualquer lista nos dados
                for key, value in history_data.items():
                    if isinstance(value, list) and value:
                        games_data = value
                        logger.info(f"üîç DEBUG: Encontrada lista na chave '{key}' com {len(value)} itens")
                        break
        elif isinstance(history_data, list):
            games_data = history_data
            logger.info(f"üîç DEBUG: Dados s√£o uma lista com {len(games_data)} itens")
        
        if not games_data:
            logger.warning("‚ùå Nenhum dado de jogos encontrado na resposta")
            logger.info(f"üîç DEBUG: Dados completos recebidos: {str(history_data)[:500]}...")
            return []
        
        # Processar cada item
        for i, item in enumerate(games_data[:5]):  # Apenas os primeiros 5 para debug
            logger.info(f"üîç DEBUG: Item {i}: {item}")
            
        try:
            # Processa cada item do hist√≥rico
            for item in games_data:
                result_data = self._process_single_game_item(item)
                if result_data:
                    results.append(result_data)
            
            # Log do total de resultados processados
            logger.info(f"‚úÖ Processados {len(results)} resultados de jogos")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar hist√≥rico: {e}")
            return []
        
        return results
    
    def _process_single_game_item(self, item) -> Optional[Dict]:
        """
        Processa um √∫nico item de jogo da API
        """
        if not isinstance(item, dict):
            return None
            
        # Tentar extrair n√∫mero e cor de diferentes campos poss√≠veis
        number = None
        color = None
        timestamp = None
        
        # Primeiro, tentar o campo gameResult que cont√©m "31 Black", "6 Black", etc.
        if 'gameResult' in item:
            result_text = str(item['gameResult'])
            parsed = self._parse_game_result(result_text)
            if parsed and parsed.get('number', -1) != -1:
                number = parsed['number']
                color = parsed['color']
        
        # Se n√£o conseguiu pelo gameResult, tentar outros campos
        if number is None:
            # Campos poss√≠veis para o n√∫mero
            for field in ['number', 'winningNumber', 'result', 'outcome', 'value', 'ball']:
                if field in item:
                    try:
                        number = int(item[field])
                        break
                    except (ValueError, TypeError):
                        continue
        
        # Campos poss√≠veis para cor
        if color is None:
            for field in ['color', 'colour', 'winningColor']:
                if field in item:
                    color = str(item[field]).lower()
                    break
        
        # Se n√£o tem cor mas tem n√∫mero, determinar cor
        if number is not None and color is None:
            if number == 0:
                color = 'green'
            elif number in [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]:
                color = 'red'
            else:
                color = 'black'
        
        # Campos poss√≠veis para timestamp
        for field in ['timestamp', 'time', 'gameTime', 'created', 'date']:
            if field in item:
                try:
                    timestamp = int(item[field])
                    break
                except (ValueError, TypeError):
                    continue
        
        # Se n√£o conseguiu extrair n√∫mero, tentar parseador de texto em outros campos
        if number is None:
            for field in ['outcomeText', 'resultText', 'text', 'description']:
                if field in item:
                    parsed = self._parse_game_result(str(item[field]))
                    if parsed and parsed.get('number', -1) != -1:
                        number = parsed['number']
                        color = parsed['color']
                        break
        
        # Se ainda n√£o tem n√∫mero, retornar None
        if number is None:
            # Log de debug apenas se o item tem gameResult
            if 'gameResult' in item:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel extrair n√∫mero do gameResult: '{item.get('gameResult', 'N/A')}'")
            return None
        
        # Criar timestamp se n√£o existir
        if timestamp is None:
            timestamp = int(time.time() * 1000)
        
        return {
            'number': number,
            'color': color,
            'timestamp': timestamp,
            'table_id': self.table_id,
            'game_id': item.get('gameId', 'unknown')
        }
            
    def generate_realistic_data(self, count: int = 100) -> List[Dict]:
        """
        Gera dados realistas de roleta para casos onde a API falha.
        
        Args:
            count: N√∫mero de resultados a gerar
            
        Returns:
            List[Dict]: Lista de resultados simulados
        """
        results = []
        
        # Definir n√∫meros da roleta e suas cores
        red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
        black_numbers = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]
        
        # Probabilidade de zero (green) √© menor em dados realistas
        all_numbers = red_numbers + black_numbers + [0]  # Adiciona zero com menor probabilidade
        
        # Gerar timestamp base (5 minutos atr√°s)
        base_timestamp = int(time.time()) - (5 * 60)
        
        # Gerar resultados com intervalo de tempo realista entre spins
        for i in range(count):
            # Selecionar n√∫mero aleat√≥rio
            number = random.choice(all_numbers)
            
            # Determinar cor
            if number == 0:
                color = "green"
            elif number in red_numbers:
                color = "red"
            else:
                color = "black"
            
            # Calcular timestamp (30-40 segundos entre spins)
            spin_timestamp = base_timestamp + (i * random.randint(30, 40))
            dt = datetime.fromtimestamp(spin_timestamp)
            
            # Criar resultado
            result = {
                "number": number,
                "color": color,
                "timestamp": spin_timestamp * 1000,  # API usa milissegundos
                "datetime": dt.isoformat(),
                "simulated": True  # Marca que √© um resultado simulado
            }
            
            results.append(result)
        
        logger.info(f"‚úÖ Gerados {len(results)} resultados simulados realistas")
        return results
        
    def get_history(self, games_count: int = 100) -> List[Dict]:
        """
        M√©todo de alto n√≠vel para obter o hist√≥rico de jogos com fallback para dados simulados.
        
        Args:
            games_count: N√∫mero de jogos a obter
            
        Returns:
            List[Dict]: Lista de resultados processados ou simulados
        """
        if not self.jsessionid:
            logger.warning("‚ö†Ô∏è JSESSIONID n√£o definido, gerando dados simulados")
            return self.generate_realistic_data(games_count)
        
        try:
            # Tentar obter dados reais da API
            status_code, response_data = self.fetch_history(games_count=games_count)
            
            # Se obteve com sucesso, processar os dados
            if status_code == 200 and response_data and "history" in response_data:
                results = self.process_history(response_data)
                if results:
                    logger.info(f"‚úÖ Obtidos {len(results)} resultados reais da API")
                    return results
            
            # Se chegou aqui, n√£o conseguiu obter dados reais
            logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel obter dados reais da API (status {status_code}), gerando dados simulados")
            return self.generate_realistic_data(games_count)
            
        except Exception as e:
            # Em caso de exce√ß√£o, tamb√©m gerar dados simulados
            logger.error(f"‚ùå Erro ao obter dados da API: {e}")
            return self.generate_realistic_data(games_count)
    
    def test_connection(self) -> Dict:
        """
        Testa a conex√£o com a API
        """
        if not self.jsessionid:
            return {
                'success': False,
                'error': 'JSESSIONID n√£o configurado'
            }
        
        try:
            status_code, data = self.fetch_history(10)  # Teste com 10 jogos
            
            return {
                'success': status_code == 200,
                'status_code': status_code,
                'has_data': bool(data),
                'jsessionid_valid': status_code != 401,
                'message': 'Conex√£o OK' if status_code == 200 else f'Erro: {status_code}'
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def set_jsessionid(self, jsessionid: str):
        """Atualiza o JSESSIONID"""
        self.jsessionid = jsessionid