#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Sistema de notifica√ß√µes para padr√µes detectados no Blaze Double
"""

import os
import sys
import time
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

# Cores para terminal
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

@dataclass
class PatternNotification:
    """Notifica√ß√£o de padr√£o detectado"""
    pattern_type: str
    detected_number: int
    predicted_color: str
    confidence: float
    reasoning: str
    timestamp: datetime
    pattern_id: str = ""

class PatternNotifier:
    """Sistema de notifica√ß√µes para padr√µes detectados"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.notifications_history = []
        self.max_history = 100
        self.min_confidence = self.config.get('min_confidence', 0.6)
        self.enabled = self.config.get('enabled', True)
        
        # Configura√ß√µes de exibi√ß√£o
        self.show_timestamp = self.config.get('show_timestamp', True)
        self.show_confidence = self.config.get('show_confidence', True)
        self.show_reasoning = self.config.get('show_reasoning', True)
        
        # Callback para notifica√ß√µes web
        self.web_callback = None
        
        # üÜï Sistema de cooldown para evitar spam de alertas
        self.cooldown_duration = self.config.get('cooldown_duration', 300)  # 5 minutos em segundos
        self.last_notification_time = {}  # Dicion√°rio para rastrear √∫ltimo tempo por tipo de padr√£o
        self.pattern_cooldowns = self.config.get('pattern_cooldowns', {
            'dominance': 300,      # 5 minutos para padr√µes de domin√¢ncia
            'sequence': 180,      # 3 minutos para sequ√™ncias
            'alternation': 120,   # 2 minutos para altern√¢ncia
            'hot_cold': 240,      # 4 minutos para n√∫meros quentes/frios
            'default': 300        # 5 minutos para outros padr√µes
        })
        
        print(f"üîî PatternNotifier inicializado - Cooldown: {self.cooldown_duration}s")
    
    def _clear_screen(self):
        """Limpa a tela do terminal"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def _is_in_cooldown(self, pattern_type: str) -> bool:
        """
        Verifica se um tipo de padr√£o est√° em cooldown
        
        Args:
            pattern_type: Tipo do padr√£o
            
        Returns:
            bool: True se est√° em cooldown
        """
        current_time = time.time()
        
        # Determinar cooldown espec√≠fico para o tipo de padr√£o
        cooldown_duration = self.pattern_cooldowns.get(pattern_type.lower(), self.pattern_cooldowns['default'])
        
        # Verificar se j√° foi notificado recentemente
        if pattern_type in self.last_notification_time:
            time_since_last = current_time - self.last_notification_time[pattern_type]
            if time_since_last < cooldown_duration:
                remaining_time = cooldown_duration - time_since_last
                print(f"‚è∞ Padr√£o '{pattern_type}' em cooldown - {remaining_time:.0f}s restantes")
                return True
        
        return False
    
    def _update_cooldown(self, pattern_type: str) -> None:
        """
        Atualiza o tempo da √∫ltima notifica√ß√£o para um tipo de padr√£o
        
        Args:
            pattern_type: Tipo do padr√£o
        """
        self.last_notification_time[pattern_type] = time.time()
    
    def _print_header(self):
        """Imprime cabe√ßalho do sistema"""
        print(f"{Colors.CYAN}{'='*80}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.WHITE}{'BLAZE DOUBLE - SISTEMA DE NOTIFICACOES DE PADROES':^80}{Colors.END}")
        print(f"{Colors.CYAN}{'='*80}{Colors.END}")
        print(f"{Colors.YELLOW}Status: {Colors.GREEN}ATIVO{Colors.END}")
        print(f"{Colors.YELLOW}Confianca minima: {Colors.WHITE}{self.min_confidence:.1%}{Colors.END}")
        print(f"{Colors.CYAN}{'='*80}{Colors.END}")
        print()
    
    def notify_pattern_detected(self, 
                              pattern_type: str,
                              detected_number: int,
                              predicted_color: str,
                              confidence: float,
                              reasoning: str,
                              pattern_id: str = "") -> bool:
        """
        Notifica quando um padr√£o √© detectado
        
        Args:
            pattern_type: Tipo do padr√£o detectado
            detected_number: N√∫mero que saiu
            predicted_color: Cor prevista para pr√≥xima rodada
            confidence: Confian√ßa da previs√£o (0.0 a 1.0)
            reasoning: Explica√ß√£o do padr√£o
            pattern_id: ID √∫nico do padr√£o
            
        Returns:
            bool: True se notifica√ß√£o foi exibida
        """
        # üÜï Verificar cooldown antes de processar
        if self._is_in_cooldown(pattern_type):
            return False
        
        # Reduzir confian√ßa m√≠nima para detectar mais padr√µes (aceitar qualquer confian√ßa acima de 25%)
        min_confidence = min(0.25, self.min_confidence)
        
        if not self.enabled or confidence < min_confidence:
            return False
        
        # Criar notifica√ß√£o
        notification = PatternNotification(
            pattern_type=pattern_type,
            detected_number=detected_number,
            predicted_color=predicted_color,
            confidence=confidence,
            reasoning=reasoning,
            timestamp=datetime.now(),
            pattern_id=pattern_id
        )
        
        # Adicionar ao hist√≥rico
        self.notifications_history.append(notification)
        if len(self.notifications_history) > self.max_history:
            self.notifications_history = self.notifications_history[-self.max_history:]
        
        # Exibir notifica√ß√£o
        self._display_notification(notification)
        
        # Enviar para web
        self._send_web_notification(notification)
        
        # üÜï Atualizar cooldown ap√≥s enviar notifica√ß√£o
        self._update_cooldown(pattern_type)
        
        return True
    
    def _display_notification(self, notification: PatternNotification):
        """Exibe a notifica√ß√£o na tela"""
        # Notifica√ß√£o principal - foco na a√ß√£o
        print(f"\n{Colors.BOLD}{Colors.MAGENTA}{'PADRAO DETECTADO - APOSTE AGORA!':^80}{Colors.END}")
        print(f"{Colors.CYAN}{'='*80}{Colors.END}")
        
        # N√∫mero que saiu
        number_color = self._get_number_color(notification.detected_number)
        print(f"{Colors.WHITE}Saiu numero: {Colors.BOLD}{number_color}{notification.detected_number}{Colors.END}")
        
        # Pr√≥xima aposta - DESTAQUE PRINCIPAL
        next_color_display = self._get_color_display(notification.predicted_color)
        print(f"{Colors.BOLD}{Colors.WHITE}Na proxima rodada apostar: {Colors.BOLD}{next_color_display}{notification.predicted_color.upper()}{Colors.END}")
        
        # Confian√ßa - DESTAQUE
        if self.show_confidence:
            confidence_color = self._get_confidence_color(notification.confidence)
            print(f"{Colors.BOLD}{Colors.WHITE}Confianca: {confidence_color}{notification.confidence:.1%}{Colors.END}")
        
        # Tipo de padr√£o (menos destaque)
        print(f"{Colors.WHITE}Padrao: {Colors.YELLOW}{notification.pattern_type}{Colors.END}")
        
        # Timestamp
        if self.show_timestamp:
            time_str = notification.timestamp.strftime("%H:%M:%S")
            print(f"{Colors.WHITE}Detectado em: {Colors.CYAN}{time_str}{Colors.END}")
        
        print(f"{Colors.CYAN}{'='*80}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.GREEN}{'APOSTE AGORA NA COR ACIMA!':^80}{Colors.END}")
        print()
        
        # Pausa para visualiza√ß√£o
        time.sleep(3)
    
    def _get_number_color(self, number: int) -> str:
        """Retorna cor baseada no n√∫mero"""
        if number == 0:
            return Colors.WHITE
        elif 1 <= number <= 7:
            return Colors.RED
        else:
            return Colors.BLUE  # Preto representado como azul para melhor visibilidade
    
    def _get_color_display(self, color: str) -> str:
        """Retorna cor de exibi√ß√£o para a previs√£o"""
        color_map = {
            'red': Colors.RED,
            'black': Colors.BLUE,
            'white': Colors.WHITE
        }
        return color_map.get(color.lower(), Colors.WHITE)
    
    def _get_confidence_color(self, confidence: float) -> str:
        """Retorna cor baseada na confian√ßa"""
        if confidence >= 0.8:
            return Colors.GREEN
        elif confidence >= 0.6:
            return Colors.YELLOW
        else:
            return Colors.RED
    
    def notify_result(self, number: int, color: str, was_correct: bool = None):
        """Notifica resultado da rodada (apenas no console, sem spam na web)"""
        number_color = self._get_number_color(number)
        color_display = self._get_color_display(color)
        
        print(f"{Colors.CYAN}{'-'*40}{Colors.END}")
        print(f"{Colors.WHITE}Resultado: {Colors.BOLD}{number_color}{number}{Colors.END} ({color_display}{color.upper()}{Colors.END})")
        
        if was_correct is not None:
            if was_correct:
                print(f"{Colors.GREEN}PREVISAO CORRETA!{Colors.END}")
            else:
                print(f"{Colors.RED}PREVISAO INCORRETA{Colors.END}")
        
        print(f"{Colors.CYAN}{'-'*40}{Colors.END}")
        print()
        
        # N√ÉO enviar para web - apenas padr√µes detectados v√£o para web
    
    def get_recent_notifications(self, count: int = 10) -> List[PatternNotification]:
        """Retorna notifica√ß√µes recentes"""
        return self.notifications_history[-count:]
    
    def get_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas das notifica√ß√µes"""
        if not self.notifications_history:
            return {}
        
        total = len(self.notifications_history)
        high_confidence = len([n for n in self.notifications_history if n.confidence >= 0.8])
        medium_confidence = len([n for n in self.notifications_history if 0.6 <= n.confidence < 0.8])
        low_confidence = len([n for n in self.notifications_history if n.confidence < 0.6])
        
        return {
            'total_notifications': total,
            'high_confidence': high_confidence,
            'medium_confidence': medium_confidence,
            'low_confidence': low_confidence,
            'average_confidence': sum(n.confidence for n in self.notifications_history) / total
        }
    
    def clear_screen(self):
        """Limpa a tela e reimprime cabe√ßalho"""
        self._clear_screen()
        self._print_header()
    
    def set_enabled(self, enabled: bool):
        """Habilita/desabilita notifica√ß√µes"""
        self.enabled = enabled
        if enabled:
            print(f"{Colors.GREEN}Notifica√ß√µes habilitadas{Colors.END}")
        else:
            print(f"{Colors.RED}Notifica√ß√µes desabilitadas{Colors.END}")
    
    def set_min_confidence(self, confidence: float):
        """Define confian√ßa m√≠nima para notifica√ß√µes"""
        self.min_confidence = max(0.0, min(1.0, confidence))
        print(f"{Colors.YELLOW}Confian√ßa m√≠nima alterada para: {self.min_confidence:.1%}{Colors.END}")
    
    def get_cooldown_status(self) -> Dict[str, Any]:
        """
        Retorna status dos cooldowns ativos
        
        Returns:
            Dict com informa√ß√µes dos cooldowns
        """
        current_time = time.time()
        active_cooldowns = {}
        
        for pattern_type, last_time in self.last_notification_time.items():
            cooldown_duration = self.pattern_cooldowns.get(pattern_type.lower(), self.pattern_cooldowns['default'])
            time_since_last = current_time - last_time
            
            if time_since_last < cooldown_duration:
                remaining_time = cooldown_duration - time_since_last
                active_cooldowns[pattern_type] = {
                    'remaining_time': remaining_time,
                    'cooldown_duration': cooldown_duration,
                    'last_notification': last_time
                }
        
        return {
            'active_cooldowns': active_cooldowns,
            'total_active': len(active_cooldowns),
            'cooldown_config': self.pattern_cooldowns
        }
    
    def clear_cooldown(self, pattern_type: str = None) -> bool:
        """
        Limpa cooldown de um padr√£o espec√≠fico ou todos
        
        Args:
            pattern_type: Tipo do padr√£o (None para limpar todos)
            
        Returns:
            bool: True se cooldown foi limpo
        """
        if pattern_type:
            if pattern_type in self.last_notification_time:
                del self.last_notification_time[pattern_type]
                print(f"‚úÖ Cooldown limpo para padr√£o: {pattern_type}")
                return True
            else:
                print(f"‚ö†Ô∏è Nenhum cooldown ativo para padr√£o: {pattern_type}")
                return False
        else:
            cleared_count = len(self.last_notification_time)
            self.last_notification_time.clear()
            print(f"‚úÖ Todos os cooldowns limpos ({cleared_count} padr√µes)")
            return True
    
    def set_web_callback(self, callback):
        """Define callback para notifica√ß√µes web"""
        self.web_callback = callback
    
    def _send_web_notification(self, notification: PatternNotification):
        """Envia notifica√ß√£o para o frontend via callback"""
        if self.web_callback:
            try:
                web_data = {
                    'type': 'pattern_detected',
                    'pattern_type': notification.pattern_type,
                    'detected_number': notification.detected_number,
                    'predicted_color': notification.predicted_color,
                    'confidence': notification.confidence,
                    'reasoning': notification.reasoning,
                    'timestamp': notification.timestamp.isoformat(),
                    'pattern_id': notification.pattern_id
                }
                print(f"Enviando notificacao web: {notification.pattern_type} -> {notification.predicted_color} ({notification.confidence:.1%})")
                self.web_callback(web_data)
                print(f"Notificacao web enviada com sucesso!")
            except Exception as e:
                print(f"ERRO - Erro ao enviar notificacao web: {e}")
                import traceback
                traceback.print_exc()
        else:
            print(f"AVISO - Callback web NAO configurado! Notificacao nao sera enviada para interface.")
    
    def _send_web_result(self, number: int, color: str, was_correct: bool = None):
        """Envia resultado para o frontend via callback"""
        if self.web_callback:
            try:
                web_data = {
                    'type': 'result',
                    'number': number,
                    'color': color,
                    'was_correct': was_correct,
                    'timestamp': datetime.now().isoformat()
                }
                self.web_callback(web_data)
            except Exception as e:
                print(f"Erro ao enviar resultado web: {e}")

# Inst√¢ncia global do notificador
notifier = PatternNotifier()

def notify_pattern(pattern_type: str, 
                  detected_number: int, 
                  predicted_color: str, 
                  confidence: float, 
                  reasoning: str = "",
                  pattern_id: str = "") -> bool:
    """
    Fun√ß√£o de conveni√™ncia para notificar padr√£o detectado
    
    Args:
        pattern_type: Tipo do padr√£o
        detected_number: N√∫mero que saiu
        predicted_color: Cor prevista
        confidence: Confian√ßa (0.0 a 1.0)
        reasoning: Explica√ß√£o
        pattern_id: ID do padr√£o
        
    Returns:
        bool: True se notifica√ß√£o foi exibida
    """
    return notifier.notify_pattern_detected(
        pattern_type, detected_number, predicted_color, 
        confidence, reasoning, pattern_id
    )

def notify_result(number: int, color: str, was_correct: bool = None):
    """Fun√ß√£o de conveni√™ncia para notificar resultado"""
    notifier.notify_result(number, color, was_correct)

def get_notifier() -> PatternNotifier:
    """Retorna inst√¢ncia do notificador"""
    return notifier
