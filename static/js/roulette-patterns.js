/**
 * Roulette Pattern Detection System - MAIN INTEGRATION
 * Sistema h√≠brido: JavaScript (b√°sico) + Python (avan√ßado)
 */

// ==================== VARI√ÅVEIS GLOBAIS ====================

let patternDetector = null; // Detector de padr√µes b√°sicos
let alertManager = null; // Gerenciador de alertas
let patternUpdateInterval = null; // Intervalo de atualiza√ß√£o autom√°tica (renomeado para evitar conflito)
let advancedUpdateInterval = null; // Intervalo para an√°lise avan√ßada
let lastResults = []; // Cache de resultados
let lastResultId = null; // ID do √∫ltimo resultado processado
let currentAlerts = []; // Alertas atuais (n√£o atualizar at√© novo resultado)

// Configura√ß√µes
const CONFIG = {
  basicUpdateInterval: 5000, // 5 segundos para an√°lise b√°sica
  advancedUpdateInterval: 30000, // 30 segundos para an√°lise avan√ßada
  maxResults: 100, // M√°ximo de resultados para an√°lise
  soundEnabled: true,
  notificationsEnabled: true,
};

// ==================== INICIALIZA√á√ÉO ====================

window.addEventListener("DOMContentLoaded", () => {
  console.log("üé∞ Inicializando Sistema de Detec√ß√£o de Padr√µes...");

  // Inicializar componentes
  initializeComponents();

  // Verificar status do integrador
  checkRouletteStatus();

  // Configurar event listeners
  setupEventListeners();

  console.log("‚úÖ Sistema inicializado");
});

/**
 * Inicializa todos os componentes necess√°rios
 */
function initializeComponents() {
  // Inicializar detector de padr√µes b√°sicos
  if (window.PatternDetector) {
    patternDetector = new window.PatternDetector();
    console.log("‚úÖ Pattern Detector inicializado");
  } else {
    console.error(
      "‚ùå PatternDetector n√£o encontrado! Certifique-se de incluir pattern-detector.js"
    );
  }

  // Inicializar gerenciador de alertas
  if (window.AlertManager) {
    alertManager = new window.AlertManager("pattern-alerts");
    console.log("‚úÖ Alert Manager inicializado");
  } else {
    console.error(
      "‚ùå AlertManager n√£o encontrado! Certifique-se de incluir alert-manager.js"
    );
  }
}

/**
 * Configura event listeners de bot√µes e controles
 */
function setupEventListeners() {
  // Bot√£o de limpar alertas
  const clearBtn = document.getElementById("clearAlertsBtn");
  if (clearBtn) {
    clearBtn.addEventListener("click", () => {
      if (alertManager) {
        alertManager.clearAlerts();
        alertManager.showToast("Alertas limpos!", "success");
      }
    });
  }

  // Bot√£o de configura√ß√µes
  const settingsBtn = document.getElementById("settingsBtn");
  if (settingsBtn) {
    settingsBtn.addEventListener("click", () => {
      showSettingsModal();
    });
  }
}

// ==================== CONTROLE DO INTEGRADOR ====================

/**
 * Verifica status do integrador de roleta
 */
async function checkRouletteStatus() {
  try {
    console.log("üîç Verificando status da roleta...");
    const response = await fetch("/api/roulette/status");
    const data = await response.json();

    console.log("üì° Resposta do status:", data);

    const isActive = data.connected && data.available;
    console.log(
      `üéØ Status: ${isActive ? "ATIVO" : "INATIVO"} (connected: ${
        data.connected
      }, available: ${data.available})`
    );

    updateStatusDisplay(isActive);

    if (isActive) {
      console.log("üü¢ Integrador ativo - iniciando detec√ß√£o de padr√µes");
      startPatternDetection();
    } else {
      console.log("üî¥ Integrador inativo - parando detec√ß√£o de padr√µes");
      console.log("üí° Motivo:", data.message || data.error || "Desconhecido");
      stopPatternDetection();
    }

    return isActive;
  } catch (error) {
    console.error("‚ùå Erro ao verificar status:", error);
    updateStatusDisplay(false);
    return false;
  }
}

/**
 * Atualiza display de status
 */
function updateStatusDisplay(isActive) {
  const statusElement = document.getElementById("pattern-status");
  if (statusElement) {
    statusElement.textContent = isActive ? "üü¢ Ativo" : "üî¥ Inativo";
    statusElement.className = isActive ? "status-active" : "status-inactive";
  }
}

// ==================== DETEC√á√ÉO DE PADR√ïES ====================

/**
 * Inicia detec√ß√£o de padr√µes (b√°sico + avan√ßado)
 */
function startPatternDetection() {
  console.log("üîç Iniciando detec√ß√£o de padr√µes...");

  // Parar intervalos existentes
  stopPatternDetection();

  // Verificar se os componentes est√£o inicializados
  if (!patternDetector) {
    console.error("‚ùå PatternDetector n√£o inicializado!");
    return;
  }

  if (!alertManager) {
    console.error("‚ùå AlertManager n√£o inicializado!");
    return;
  }

  console.log("‚úÖ Componentes OK - configurando intervalos...");

  // Detec√ß√£o b√°sica (r√°pida - JavaScript)
  patternUpdateInterval = setInterval(() => {
    detectBasicPatterns();
  }, CONFIG.basicUpdateInterval);

  // Detec√ß√£o avan√ßada (lenta - Python)
  advancedUpdateInterval = setInterval(() => {
    detectAdvancedPatterns();
  }, CONFIG.advancedUpdateInterval);

  console.log(
    `‚è∞ Intervalos configurados: b√°sico=${CONFIG.basicUpdateInterval}ms, avan√ßado=${CONFIG.advancedUpdateInterval}ms`
  );

  // Executar imediatamente
  console.log("üöÄ Executando primeira an√°lise...");
  detectBasicPatterns();
  detectAdvancedPatterns();
}

/**
 * Para detec√ß√£o de padr√µes
 */
function stopPatternDetection() {
  if (patternUpdateInterval) {
    clearInterval(patternUpdateInterval);
    patternUpdateInterval = null;
  }

  if (advancedUpdateInterval) {
    clearInterval(advancedUpdateInterval);
    advancedUpdateInterval = null;
  }

  console.log("‚è∏Ô∏è Detec√ß√£o de padr√µes pausada");
}

/**
 * Detecta padr√µes b√°sicos usando JavaScript (FASE 1)
 */
async function detectBasicPatterns() {
  console.log("üîç detectBasicPatterns() iniciada...");
  try {
    // Buscar resultados da API
    const response = await fetch("/api/roulette/patterns/basic");
    const data = await response.json();

    console.log("üì° Resposta da API /patterns/basic:", data);

    if (!data.success || !data.results || data.results.length === 0) {
      console.log("‚ö†Ô∏è Nenhum resultado dispon√≠vel para an√°lise b√°sica");
      return;
    }

    // Verificar se h√° um novo resultado
    const currentFirstResult = data.results[0];
    const currentResultId = `${currentFirstResult.number}-${currentFirstResult.color}-${currentFirstResult.timestamp}`;

    if (lastResultId === currentResultId) {
      console.log("üîÑ Mesmo resultado - n√£o atualizando alertas");
      return;
    }

    console.log(
      `üÜï Novo resultado detectado: ${currentFirstResult.number} ${currentFirstResult.color}`
    );
    lastResultId = currentResultId;
    lastResults = data.results;

    console.log(
      `üìä Analisando ${lastResults.length} resultados (b√°sico):`,
      lastResults
    );

    // Usar detector JavaScript
    if (!patternDetector) {
      console.error("‚ùå PatternDetector n√£o inicializado");
      return;
    }

    console.log("‚úÖ PatternDetector OK, chamando detectAllPatterns()...");

    const patterns = patternDetector.detectAllPatterns(lastResults);
    console.log(`‚úÖ Detectados ${patterns.length} padr√µes b√°sicos:`, patterns);

    // Limpar alertas antigos e exibir novos padr√µes
    if (alertManager) {
      alertManager.clearAlerts();
      console.log("üóëÔ∏è Alertas antigos limpos");
    }

    currentAlerts = patterns;
    displayPatterns(patterns, "basic");
  } catch (error) {
    console.error("‚ùå Erro na detec√ß√£o b√°sica:", error);
  }
}

/**
 * Detecta padr√µes avan√ßados usando Python (FASE 2)
 */
async function detectAdvancedPatterns() {
  console.log("üî¨ detectAdvancedPatterns() iniciada...");
  try {
    // Buscar an√°lise avan√ßada da API Python
    const response = await fetch("/api/roulette/patterns/advanced");
    const data = await response.json();

    console.log("üì° Resposta da API /patterns/advanced:", data);

    if (!data.success) {
      console.log("‚ö†Ô∏è An√°lise avan√ßada n√£o dispon√≠vel:", data.message);
      return;
    }

    const patterns = data.patterns || [];
    console.log(
      `‚úÖ Detectados ${patterns.length} padr√µes avan√ßados:`,
      patterns
    );

    // S√≥ exibir padr√µes avan√ßados se n√£o h√° alertas b√°sicos ativos
    // ou se os padr√µes avan√ßados s√£o mais significativos
    if (currentAlerts.length === 0 || patterns.length > 0) {
      console.log("üéØ Exibindo padr√µes avan√ßados");
      displayPatterns(patterns, "advanced");
    } else {
      console.log("‚è∏Ô∏è Mantendo alertas b√°sicos ativos");
    }

    // Atualizar estat√≠sticas se dispon√≠veis
    if (data.statistics) {
      updateStatisticsDisplay(data.statistics);
    }
  } catch (error) {
    console.error("‚ùå Erro na detec√ß√£o avan√ßada:", error);
  }
}

/**
 * Exibe padr√µes na interface
 */
function displayPatterns(patterns, type) {
  console.log(
    `üéØ displayPatterns() chamada - tipo: ${type}, padr√µes:`,
    patterns
  );

  if (!alertManager) {
    console.error("‚ùå AlertManager n√£o inicializado");
    return;
  }

  console.log("‚úÖ AlertManager OK:", alertManager);

  if (!patterns || patterns.length === 0) {
    console.log(`‚ö†Ô∏è Nenhum padr√£o ${type} detectado`);
    return;
  }

  // Filtrar apenas padr√µes com confian√ßa suficiente
  const significantPatterns = patterns.filter((p) => p.confidence >= 45);

  if (significantPatterns.length === 0) {
    console.log(`Nenhum padr√£o ${type} significativo (confian√ßa < 45%)`);
    return;
  }

  console.log(`üì¢ Exibindo ${significantPatterns.length} padr√µes ${type}`);

  // Exibir cada padr√£o (sem limpar os existentes)
  for (const pattern of significantPatterns) {
    alertManager.showPattern(pattern);

    // Tocar som para padr√µes de alta confian√ßa
    if (pattern.confidence >= 70 && CONFIG.soundEnabled) {
      alertManager.playAlertSound();
    }

    // Enviar notifica√ß√£o para padr√µes cr√≠ticos
    if (pattern.confidence >= 80 && CONFIG.notificationsEnabled) {
      sendBrowserNotification(pattern);
    }
  }
}

/**
 * Atualiza display de estat√≠sticas
 */
function updateStatisticsDisplay(stats) {
  // Atualizar contadores
  if (stats.total_spins) {
    const totalElement = document.getElementById("total-spins");
    if (totalElement) {
      totalElement.textContent = stats.total_spins;
    }
  }

  // Atualizar n√∫meros quentes
  if (stats.hot_numbers) {
    const hotElement = document.getElementById("hot-numbers");
    if (hotElement) {
      const numbers = stats.hot_numbers
        .map((n) => `${n.number} (${n.count})`)
        .join(", ");
      hotElement.textContent = numbers;
    }
  }

  // Atualizar n√∫meros frios
  if (stats.cold_numbers) {
    const coldElement = document.getElementById("cold-numbers");
    if (coldElement) {
      const numbers = stats.cold_numbers
        .map((n) => `${n.number} (${n.count})`)
        .join(", ");
      coldElement.textContent = numbers;
    }
  }

  // Atualizar setores
  if (stats.sectors) {
    updateSectorDisplay(stats.sectors);
  }
}

/**
 * Atualiza display de setores
 */
function updateSectorDisplay(sectors) {
  for (const [sector, data] of Object.entries(sectors)) {
    const element = document.getElementById(`sector-${sector}`);
    if (element) {
      element.textContent = `${data.count} (${data.percentage}%)`;
    }
  }
}

// ==================== NOTIFICA√á√ïES DO NAVEGADOR ====================

/**
 * Envia notifica√ß√£o do navegador
 */
function sendBrowserNotification(pattern) {
  if (!("Notification" in window)) {
    return;
  }

  if (Notification.permission === "granted") {
    new Notification("üé∞ Padr√£o Detectado!", {
      body: `${pattern.title}\nConfian√ßa: ${pattern.confidence}%`,
      icon: "/static/images/roulette-icon.png",
      badge: "/static/images/badge.png",
    });
  } else if (Notification.permission !== "denied") {
    Notification.requestPermission().then((permission) => {
      if (permission === "granted") {
        sendBrowserNotification(pattern);
      }
    });
  }
}

// ==================== MODAL DE CONFIGURA√á√ïES ====================

/**
 * Mostra modal de configura√ß√µes
 */
function showSettingsModal() {
  const modal = document.getElementById("settings-modal");
  if (modal) {
    modal.style.display = "flex";
  }
}

/**
 * Fecha modal de configura√ß√µes
 */
function closeSettingsModal() {
  const modal = document.getElementById("settings-modal");
  if (modal) {
    modal.style.display = "none";
  }
}

/**
 * Salva configura√ß√µes
 */
function saveSettings() {
  // Obter valores dos inputs
  const soundCheckbox = document.getElementById("sound-enabled");
  const notificationCheckbox = document.getElementById("notification-enabled");
  const basicIntervalInput = document.getElementById("basic-interval");
  const advancedIntervalInput = document.getElementById("advanced-interval");

  if (soundCheckbox) CONFIG.soundEnabled = soundCheckbox.checked;
  if (notificationCheckbox)
    CONFIG.notificationsEnabled = notificationCheckbox.checked;
  if (basicIntervalInput)
    CONFIG.basicUpdateInterval = parseInt(basicIntervalInput.value) * 1000;
  if (advancedIntervalInput)
    CONFIG.advancedUpdateInterval =
      parseInt(advancedIntervalInput.value) * 1000;

  // Salvar no localStorage
  localStorage.setItem("roulette-pattern-config", JSON.stringify(CONFIG));

  // Reiniciar detec√ß√£o com novas configura√ß√µes
  if (patternUpdateInterval) {
    stopPatternDetection();
    startPatternDetection();
  }

  closeSettingsModal();

  if (alertManager) {
    alertManager.showToast("Configura√ß√µes salvas!", "success");
  }
}

/**
 * Carrega configura√ß√µes salvas
 */
function loadSettings() {
  const saved = localStorage.getItem("roulette-pattern-config");
  if (saved) {
    Object.assign(CONFIG, JSON.parse(saved));
    console.log("‚öôÔ∏è Configura√ß√µes carregadas:", CONFIG);
  }
}

// Carregar configura√ß√µes ao iniciar
loadSettings();

// ==================== EXPORTA√á√ïES GLOBAIS ====================

window.roulettePatterns = {
  startDetection: startPatternDetection,
  stopDetection: stopPatternDetection,
  checkStatus: checkRouletteStatus,
  getLastResults: () => lastResults,
  getConfig: () => CONFIG,
  showSettings: showSettingsModal,
  closeSettings: closeSettingsModal,
  saveSettings: saveSettings,
};

console.log("‚úÖ Roulette Pattern System loaded");
