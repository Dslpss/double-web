#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script de teste r√°pido para o integrador da Roleta Brasileira
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from integrators.pragmatic_brazilian_roulette import PragmaticBrazilianRoulette


def test_login_and_history():
    """Testa login e busca de hist√≥rico."""
    
    print("=" * 60)
    print("TESTE: Pragmatic Brazilian Roulette Integrator")
    print("=" * 60)
    print()
    
    # Carregar vari√°veis de ambiente do .env
    import os
    from dotenv import load_dotenv
    load_dotenv()
    
    USERNAME = os.getenv('PRAGMATIC_USERNAME')
    PASSWORD = os.getenv('PRAGMATIC_PASSWORD')
    
    if not USERNAME or not PASSWORD:
        print("‚ùå Configure as vari√°veis no arquivo .env")
        return
    
    print("1Ô∏è‚É£  Criando integrador...")
    integrator = PragmaticBrazilianRoulette(USERNAME, PASSWORD)
    print("‚úÖ Integrador criado\n")
    
    print("2Ô∏è‚É£  Fazendo login...")
    if integrator.login():
        print("‚úÖ Login realizado com sucesso!")
        if integrator.jsessionid:
            print(f"   JSESSIONID: {integrator.jsessionid[:50]}...")
        if integrator.token_cassino:
            print(f"   Token: {integrator.token_cassino[:30]}...\n")
    else:
        print("‚ùå Erro no login")
        return
    
    print("3Ô∏è‚É£  Buscando hist√≥rico (√∫ltimos 20 jogos)...")
    history = integrator.get_history(num_games=20)
    
    if history:
        print(f"‚úÖ Obtidos {len(history)} resultados\n")
        
        print("üìä √öltimos 10 resultados:")
        print("-" * 60)
        print(f"{'#':<4} {'N√∫mero':<8} {'Cor':<10} {'Game ID':<20}")
        print("-" * 60)
        
        for i, result in enumerate(history[:10], 1):
            print(f"{i:<4} {result['number']:<8} {result['color']:<10} {result['id']:<20}")
        
        print("-" * 60)
        
        # Estat√≠sticas
        colors = [r['color'] for r in history]
        red_count = colors.count('red')
        black_count = colors.count('black')
        green_count = colors.count('green')
        
        print(f"\nüìà Estat√≠sticas dos {len(history)} resultados:")
        print(f"   üî¥ Red:   {red_count:2d} ({red_count/len(history)*100:.1f}%)")
        print(f"   ‚ö´ Black: {black_count:2d} ({black_count/len(history)*100:.1f}%)")
        print(f"   üü¢ Green: {green_count:2d} ({green_count/len(history)*100:.1f}%)")
        
    else:
        print("‚ùå Erro ao buscar hist√≥rico")
        return
    
    print("\n4Ô∏è‚É£  Testando renova√ß√£o de sess√£o...")
    print("   For√ßando expira√ß√£o da sess√£o...")
    integrator.jsessionid = None
    
    print("   Buscando hist√≥rico novamente (deve fazer login autom√°tico)...")
    history2 = integrator.get_history(num_games=5)
    
    if history2:
        print(f"‚úÖ Renova√ß√£o autom√°tica funcionou! Obtidos {len(history2)} resultados")
        if integrator.jsessionid:
            print(f"   Novo JSESSIONID: {integrator.jsessionid[:50]}...")
    else:
        print("‚ùå Erro na renova√ß√£o autom√°tica")
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print("=" * 60)


def test_continuous_monitor():
    """Testa monitoramento cont√≠nuo."""
    
    print("=" * 60)
    print("TESTE: Monitoramento Cont√≠nuo")
    print("=" * 60)
    print()
    
    import os
    from dotenv import load_dotenv
    load_dotenv()
    
    USERNAME = os.getenv('PRAGMATIC_USERNAME')
    PASSWORD = os.getenv('PRAGMATIC_PASSWORD')
    
    if not USERNAME or not PASSWORD:
        print("‚ùå Configure as vari√°veis no arquivo .env")
        return
    
    integrator = PragmaticBrazilianRoulette(USERNAME, PASSWORD)
    
    def on_new_result(result):
        """Callback para novos resultados."""
        print(f"\nüé∞ NOVO RESULTADO: {result['number']} {result['color']} (ID: {result['id']})")
    
    print("Iniciando monitoramento (Ctrl+C para parar)...\n")
    integrator.monitor_continuous(callback=on_new_result, interval=10)


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "monitor":
        test_continuous_monitor()
    else:
        test_login_and_history()
